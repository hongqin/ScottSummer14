#sciLiteracy = c("light", "fossil", "food", "electronCharge",
#                "earlyHuman", "laser", "continents", "antibiotics", "electronSize", "earthCenter")
tb2$light = 0.5
tb2$light[ tb$light=='TRUE' ] =1
tb2$light[ tb$light=='Wrong' ] =0
table(tb$light)
table(tb2$light)
tb2$fossil = 0.5
tb2$fossil[ tb$fossil=='6 million and 5 years old' ] = 0
tb2$fossil[grep('Still', tb$fossil)] = 1;
table(tb$fossil)
table(tb2$fossil)
tb2$food = 0.5
tb2$food[ tb$food=='Dis-agree' ] = 1
tb2$food[grep('Agree', tb$food)] = 0;
table(tb$food)
table(tb2$food)
tb2$electronCharge = 0
tb2$electronCharge[grep('Positive', tb$electronCharge)] = 1;
table(tb$electronCharge)
table(tb2$electronCharge)
tb2$earlyHuman = 0.5
tb2$earlyHuman[grep('TRUE', tb$earlyHuman)] = 0;
tb2$earlyHuman[grep('FALSE', tb$earlyHuman)] = 1;
table(tb$earlyHuman)
table(tb2$earlyHuman)
tb2$earlyHuman = 0.5
tb2$earlyHuman[grep('TRUE', tb$earlyHuman)] = 0;
tb2$earlyHuman[grep('FALSE', tb$earlyHuman)] = 1;
table(tb$earlyHuman)
table(tb2$earlyHuman)
tb2$laser = 0.5
tb2$laser[grep('TRUE', tb$laser)] = 0;
tb2$laser[grep('FALSE', tb$laser)] = 1;
table(tb$laser)
table(tb2$laser)
tb2$continents = 0.5
tb2$continents[grep('TRUE', tb$continents)] = 1;
tb2$continents[grep('FALSE', tb$continents)] = 0;
table(tb$continents)
table(tb2$continents)
tb2$antibiotics = 0.5
tb2$antibiotics[grep('TRUE', tb$antibiotics)] = 0;
tb2$antibiotics[grep('FALSE', tb$antibiotics)] = 1;
table(tb$antibiotics)
table(tb2$antibiotics)
tb2$electronSize = 0.5
tb2$electronSize[grep('True', tb$electronSize)] = 1;
tb2$electronSize[grep('FALSE', tb$electronSize)] = 0;
table(tb$electronSize)
table(tb2$electronSize)
tb2$earthCenter = 0.5
tb2$earthCenter[grep('TRUE', tb$earthCenter)] = 1;
tb2$earthCenter[grep('FALSE', tb$earthCenter)] = 0;
table(tb$earthCenter)
table(tb2$earthCenter)
#sciLiteracy = c("light", "fossil", "food", "electronCharge",
#                "earlyHuman", "laser", "continents", "antibiotics", "electronSize", "earthCenter")
tb2$SciLitScore = apply( tb2[, sciLiteracy], MARGIN=1, FUN=sum ) #by row
hist(tb2$SciLitScore, br=20)
#########################
## regression analyses
#summary(tb); str(tb)
summary(tb2)
str(tb2);
pairs(tb2[, c("metric", "SciLitScore", "SciAttitude")])
summary(lm(tb2$SciLitScore ~ tb2$metric )) #significant
summary(lm(tb2$SciAttitude ~ tb2$metric )) #significant
summary(lm(tb2$SciAttitude ~ tb2$SciLitScore + tb2$metric )) #significant
## metric -> SciAttitude and SciLitScore
summary(lm(tb2$SciLitScore ~ tb2$metric + tb2$age + tb2$gender + tb2$country  )) #only metric is significant
summary(lm(tb2$SciLitScore ~ tb2$country)) #p=0.018, but seems due to metric?
summary(lm(tb2$SciLitScore ~ tb2$metric + tb2$country  )) #only metric is significant
table(tb2$country)
plot( tb2$SciLitScore ~ jitter(tb2$metric), xlab='Metric Proficiency', ylab='Scientific Literacy', ylim=c(2,10) )
m1 = lm(tb2$SciLitScore ~ tb2$metric )
abline(m1, col='red')
summary(m1)
text(2, 2.5, "SciLit ~ Metric, R2=0.28, p=1.5E-15", col="red", pos=4)
#abline(m2, col='blue')
summary(m2)
m2 = lm(tb2$SciLitScore ~ tb2$metric + tb2$age)
anova(m1, m2)
m3 = lm(tb2$SciLitScore ~ tb2$metric + tb2$age + tb2$gender)
summary(m3)
anova(m2,m3)
m4 = lm(tb2$SciLitScore ~ tb2$metric + tb2$age + tb2$country)
anova(m2, m4)
#text(2, 2, "SciLit ~ Metric + Age, R2=0.29, p=2.8E-14", col="blue", pos=4)
plot( tb2$SciAttitude ~ jitter(tb2$metric), ylim=c(0.5,4), xlab='Metric Proficiency', ylab='Attitude toward Science' )
m1 = lm( tb2$SciAttitude ~ tb2$metric )
m2 = lm( tb2$SciAttitude ~ tb2$metric + tb2$age )
abline(m1, col='red')
abline(m2, col='blue')
summary(m1)
summary(m2)
anova(m1, m2)
text(2, 0.9, "SciAttitude ~ Metric , R2=0.18, p=1.0E-9", col="red", pos=4)
text(2, 0.7, "SciAttitude ~ Metric + Age, R2=0.24, p=4.7E-12", col="blue", pos=4)
plot( tb2$SciAttitude ~ jitter(tb2$age), ylab='Attitude toward Science', xlab='Age')
m2 = lm( tb2$SciAttitude ~ tb2$age + tb2$metric)
abline(m2, col='blue')
text(30, 1.7, "SciAttitude ~ Metric + Age, R2=0.24, p=4.7E-12", col="blue", pos=4)
summary(lm(tb2$SciAttitude ~ tb2$metric + tb2$age + tb2$gender + tb2$country  )) #age is signicant!!!
#but this might be a bias in the sample
# 1) there is many faculty
# 2) people took the sample may be interested in the metric and science at the first place?!
summary(lm(tb2$SciAttitude ~ tb2$metric + tb2$age + tb2$gender + tb2$country + tb2$degree  )) #age is signicant!!!
summary(lm(tb2$SciAttitude ~ tb2$SciLitScore))
summary(lm(tb2$SciAttitude ~ tb2$SciLitScore + tb2$metric))
###########
# remove phD from the samples
#
summary(tb2[, 1:5])
tb3 = tb2[ - grep('Ph.D.', tb2$degree)  , ]
summary(tb3)
summary(lm(tb3$SciAttitude ~ tb3$metric + tb3$age + tb3$gender + tb3$country + tb3$degree  ))
#age is still signicant after PhD are removed from the sample
########test
testTwoFactorTb2 = function( fac1, fac2) {
tbTwo = table( tb2[,fac1], tb2[,fac2] )
print(tbTwo)
f = fisher.test(tbTwo)
}
#metrics = c("shaq", "kilo", "mm", "inseam", "weather")
#sciLiteracy = c("light", "fossil", "food", "electronCharge",
#                "earlyHuman", "laser", "continents", "antibiotics", "electronSize", "earthCenter")
#sciAttitude = c("religiousView", "dailyLife", "SciOnLife", "SciEffect")
f = testTwoFactorTb2( "shaq", "religiousView"); f
f = testTwoFactorTb2( "shaq", "dailyLife"); f
f = testTwoFactorTb2( "shaq", "SciOnLife"); f
f = testTwoFactorTb2( "shaq", "SciEffect"); f #significant effect!!!!
f = testTwoFactorTb2( "kilo", "SciEffect"); f #significant effect!!!
f = testTwoFactorTb2( "mm", "SciEffect"); f #significant effect!!!
f = testTwoFactorTb2( "inseam", "SciEffect"); f #significant effect!!!
f = testTwoFactorTb2( "weather", "SciEffect"); f #p=0.078
f = testTwoFactorTb2( "country", "SciEffect"); f #p=0.24
summary(lm(tb2$SciEffect ~ tb2$kilo + tb2$country + tb2$gender + tb2$age + tb2$degree )) #significant kilo
summary(lm(tb2$SciOnLife ~ tb2$kilo + tb2$country + tb2$gender + tb2$age + tb2$degree )) #no effect
summary(lm(tb2$religiousView ~ tb2$kilo + tb2$country + tb2$gender + tb2$age + tb2$degree )) #age effect
summary(lm(tb2$dailyLife ~ tb2$kilo + tb2$country + tb2$gender + tb2$age + tb2$degree )) #gender
summary(lm(tb2$religiousView ~ tb2$kilo + tb2$country + tb2$gender + tb2$age + tb2$degree )) #significant age, gender
summary(lm(tb2$SciOnLife ~ tb2$kilo + tb2$country + tb2$gender + tb2$age + tb2$degree )) #no effect
summary(lm(tb2$dailyLife ~ tb2$kilo + tb2$country + tb2$gender + tb2$age + tb2$degree )) #gender effect, education
summary(lm(tb2$SciEffect ~ tb2$mm + tb2$country + tb2$gender + tb2$age + tb2$degree )) #no effect
summary(lm(tb2$SciEffect ~ tb2$inseam + tb2$country + tb2$gender + tb2$age + tb2$degree )) #random
summary(lm(tb2$SciEffect ~ tb2$shaq + tb2$country + tb2$gender + tb2$age + tb2$degree )) #p=0.066 shaq
summary(lm(tb2$SciEffect ~ tb2$weather + tb2$country + tb2$gender + tb2$age + tb2$degree )) #no effect
f = testTwoFactorTb2("country", "shaq")
f
f = testTwoFactorTb2( "country", "shaq")
f
5+49
5*4
8-2
6%3
#Perform linear regression of lifespan to morphological plasticity and summarize results
m=lm9=(lifespan$RLS_Del_alpha ~ lifespan$stddev);)
m = lm(lifespan$RLS_Del_alpha ~ lifespan$stddev);
###INPUT DATA INTO R
#Read lifespan table into R
lifespan = read.csv("lifespan.csv");
## will CLS data also be helpful?
#Read growth fitness table into R
# http://www-deletion.stanford.edu/YDPM/Download_Data/Yeast_Deletion_Project/Regression_Tc1_hom.txt
fit = read.csv("growth.fitness.hom.csv");
fit$orf = as.character( fit$orf );
#There are new and alternative fitness data available
#Read evolutionary distance table into R
data = read.csv( "Sce.Spa.KaKs.csv");
# alternative KaKs should be used for cross-validation
#Input protein interaction pairs
pairs = read.csv("pairs.csv");
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
# we also use genetic interaction data (aka synthetic-lethal data)
#Calculate connecting degrees for proteins
ids = c(pairs$ORF1, pairs$ORF2);
degree = table( ids );
#Summarize the results in a dataframe 'net'
net = data.frame(degree);
str(net);
net$id = as.character( net$id);
#Visual examination to double the merged results
head(data)
net[net$id=='YAL005C', ]
net[net$id=='YAL012W', ]
#
#Read morphology mutant data into R
scmd = read.table( "scmd.tab", sep="\t", header=T)
#Normalize the data by column by Z-score
row.names(scmd) = as.character( scmd$name )
for( j in 2:502 ){
scmd[,j] = ( scmd[,j] - mean(scmd[,j],na.rm=T) )/ sqrt( var( scmd[,j], na.rm=T))
};
#Calculate the standard deviation by row (a proxy for morphology plasticity)
for ( i in 1:4718){
scmd$stddev[i] = sqrt(var( t(scmd[i,2:502]), na.rm=T ) )
};
# Please go find, edit, and load protein half-life data into R. 2006 Belle...?
# Please see the referecen in the Dhami paper
# ... ...
# Bonus point, mRNA half-life data
###FITNESS VS LIFESPAN REGRESSION ANALYSIS
#Determine which fitness growth medium has the best relationship to RLS
lifespan$YPD = fit$YPD[match(lifespan$ORF, fit$orf)];
summary(lm(lifespan$RLS_Del_alpha ~ lifespan$YPD));
lifespan$YPDGE = fit$YPDGE[match(lifespan$ORF, fit$orf)];
summary(lm(lifespan$RLS_Del_alpha ~ lifespan$YPDGE));
lifespan$YPG = fit$YPG[match(lifespan$ORF, fit$orf)];
summary(lm(lifespan$RLS_Del_alpha ~ lifespan$YPG));
lifespan$YPE = fit$YPE[match(lifespan$ORF, fit$orf)];
summary(lm(lifespan$RLS_Del_alpha ~ lifespan$YPE));
lifespan$YPL = fit$YPL[match(lifespan$ORF, fit$orf)];
summary(lm(lifespan$RLS_Del_alpha ~ lifespan$YPL));
##The best fitness vs lifespan data was for YPE because the R squared value was the strongest and the p value was smallest.
#Plot YPE fitness vs lifespan
plot(lifespan$RLS_Del_alpha ~ lifespan$YPE, ylab="Replicative Lifespan", xlab="Fitness Robustness");
abline( m, col="red");
###EVOLUTIONARY DISTANCE VS LIFESPAN REGRESSION ANALYSIS
#Match lifespan to evolutionary distance
lifespan$Ka = data$Ka[match(lifespan$ORF,data$orfname)];
#Perform linear regression of lifespan vs evolutionary distance and summarize results
m = lm(lifespan$RLS_Del_alpha ~ lifespan$Ka);
summary(m);
#Plot regression analysis
plot(lifespan$RLS_Del_alpha ~ lifespan$Ka, ylab="Replicative Lifespan", xlab="Evolutionary Distance(K)");
abline( m, col="red");
###PROTEIN INTERACTIONS VS LIFESPAN REGRESSION ANALYSIS
#calculate connecting degrees for proteins
ids = c(pairs$ORF1, pairs$ORF2);
degree = table( ids );
#Summarize the results in a dataframe 'net'
net = data.frame(degree);
str(net);
net$id = as.character( net$id);
#Match data and net
data$degree = net$Freq[match(data$orfname, net$id )]
#Match lifespan to Frequency
lifespan$Freq = net$Freq[match(lifespan$ORF, net$id )];
#Perform linear regression of lifespan vs evolutionary distance and summarize results
m= lm(lifespan$RLS_Del_alpha ~ lifespan$Freq);
summary(m);
#Plot regression analysis
plot(lifespan$RLS_Del_alpha ~ lifespan$Freq, ylab="Replicative Lifespan", xlab="Protein Interactions" );
abline( m, col="red");
###MORPHOLOGICAL PLASTICITY VS LIFESPAN REGRESSION ANALYSIS
#Match lifespan to mutant data
lifespan$stddev = scmd$stddev[match(lifespan$ORF, scmd$name)];
#Perform linear regression of lifespan to morphological plasticity and summarize results
m = lm(lifespan$RLS_Del_alpha ~ lifespan$stddev);
summary(m);
#Plot of regresssion analysis
plot(scmd$RLS_Del_alpha ~ scmd[,j]), ylab="Replicative Lifespan", xlab="Morphological Plasticity Robustness" );
abline( m, col="red");
###LIFESPAN MULTIPLE REGRESSION ANALYSIS
#Perform regression analysis and summarize results
m = lm(lifespan$RLS_Del_alpha ~ lifespan$YPE + lifespan$Ka + lifespan$Freq + lifespan$stddev );
summary(m);
###ROBUST FACTOR MULTIPLE REGRESSION ANALYSIS
#Perform regression analysis and summarize results
m = lm(lifespan$YPE ~ lifespan$Ka + lifespan$Freq + lifespan$stddev);
summary(m);
###FITNESS, MORPHOLOGICAL PLASTICITY & LIFESPAN MULTIPLE REGRESSION
#Perform regression analysis and summarize results when RLS is held constant
m = lm(lifespan$RLS_Del_alpha ~ lifespan$stddev + lifespan$YPE);
summary(m);
#Perform regression analysis and summarize results when morphological plasticity is held constant
m = lm(lifespan$stddev ~ lifespan$YPE + lifespan$RLS_Del_alpha);
summary(m);
#Perform regression analysis and summarize results when fitness is held constant
m = lm(lifespan$YPE ~ lifespan$stddev + lifespan$RLS_Del_alpha);
summary(m);
q()
###INPUT DATA INTO R
#Read lifespan table into R
lifespan = read.csv("lifespan.csv");
## will CLS data also be helpful?
#Read growth fitness table into R
# http://www-deletion.stanford.edu/YDPM/Download_Data/Yeast_Deletion_Project/Regression_Tc1_hom.txt
fit = read.csv("growth.fitness.hom.csv");
fit$orf = as.character( fit$orf );
#There are new and alternative fitness data available
#Read evolutionary distance table into R
data = read.csv( "Sce.Spa.KaKs.csv");
# alternative KaKs should be used for cross-validation
#Input protein interaction pairs
pairs = read.csv("pairs.csv");
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
# we also use genetic interaction data (aka synthetic-lethal data)
#Calculate connecting degrees for proteins
ids = c(pairs$ORF1, pairs$ORF2);
degree = table( ids );
#Summarize the results in a dataframe 'net'
net = data.frame(degree);
str(net);
net$id = as.character( net$id);
#Visual examination to double the merged results
head(data)
net[net$id=='YAL005C', ]
net[net$id=='YAL012W', ]
#
#Read morphology mutant data into R
scmd = read.table( "scmd.tab", sep="\t", header=T)
#Normalize the data by column by Z-score
row.names(scmd) = as.character( scmd$name )
for( j in 2:502 ){
scmd[,j] = ( scmd[,j] - mean(scmd[,j],na.rm=T) )/ sqrt( var( scmd[,j], na.rm=T))
};
#Calculate the standard deviation by row (a proxy for morphology plasticity)
for ( i in 1:4718){
scmd$stddev[i] = sqrt(var( t(scmd[i,2:502]), na.rm=T ) )
};
# Please go find, edit, and load protein half-life data into R. 2006 Belle...?
# Please see the referecen in the Dhami paper
# ... ...
# Bonus point, mRNA half-life data
###FITNESS VS LIFESPAN REGRESSION ANALYSIS
#Determine which fitness growth medium has the best relationship to RLS
lifespan$YPD = fit$YPD[match(lifespan$ORF, fit$orf)];
summary(lm(lifespan$RLS_Del_alpha ~ lifespan$YPD));
lifespan$YPDGE = fit$YPDGE[match(lifespan$ORF, fit$orf)];
summary(lm(lifespan$RLS_Del_alpha ~ lifespan$YPDGE));
lifespan$YPG = fit$YPG[match(lifespan$ORF, fit$orf)];
summary(lm(lifespan$RLS_Del_alpha ~ lifespan$YPG));
lifespan$YPE = fit$YPE[match(lifespan$ORF, fit$orf)];
summary(lm(lifespan$RLS_Del_alpha ~ lifespan$YPE));
lifespan$YPL = fit$YPL[match(lifespan$ORF, fit$orf)];
summary(lm(lifespan$RLS_Del_alpha ~ lifespan$YPL));
##The best fitness vs lifespan data was for YPE because the R squared value was the strongest and the p value was smallest.
#Plot YPE fitness vs lifespan
plot(lifespan$RLS_Del_alpha ~ lifespan$YPE, ylab="Replicative Lifespan", xlab="Fitness Robustness");
abline( m, col="red");
###EVOLUTIONARY DISTANCE VS LIFESPAN REGRESSION ANALYSIS
#Match lifespan to evolutionary distance
lifespan$Ka = data$Ka[match(lifespan$ORF,data$orfname)];
#Perform linear regression of lifespan vs evolutionary distance and summarize results
m = lm(lifespan$RLS_Del_alpha ~ lifespan$Ka);
summary(m);
#Plot regression analysis
plot(lifespan$RLS_Del_alpha ~ lifespan$Ka, ylab="Replicative Lifespan", xlab="Evolutionary Distance(K)");
abline( m, col="red");
###PROTEIN INTERACTIONS VS LIFESPAN REGRESSION ANALYSIS
#calculate connecting degrees for proteins
ids = c(pairs$ORF1, pairs$ORF2);
degree = table( ids );
#Summarize the results in a dataframe 'net'
net = data.frame(degree);
str(net);
net$id = as.character( net$id);
#Match data and net
data$degree = net$Freq[match(data$orfname, net$id )]
#Match lifespan to Frequency
lifespan$Freq = net$Freq[match(lifespan$ORF, net$id )];
#Perform linear regression of lifespan vs evolutionary distance and summarize results
m= lm(lifespan$RLS_Del_alpha ~ lifespan$Freq);
summary(m);
#Plot regression analysis
plot(lifespan$RLS_Del_alpha ~ lifespan$Freq, ylab="Replicative Lifespan", xlab="Protein Interactions" );
abline( m, col="red");
###MORPHOLOGICAL PLASTICITY VS LIFESPAN REGRESSION ANALYSIS
#Match lifespan to mutant data
lifespan$stddev = scmd$stddev[match(lifespan$ORF, scmd$name)];
#Perform linear regression of lifespan to morphological plasticity and summarize results
m = lm(lifespan$RLS_Del_alpha ~ lifespan$stddev);
summary(m);
#Plot of regresssion analysis
plot(scmd$RLS_Del_alpha ~ scmd[,j]), ylab="Replicative Lifespan", xlab="Morphological Plasticity Robustness" );
abline( m, col="red");
###LIFESPAN MULTIPLE REGRESSION ANALYSIS
#Perform regression analysis and summarize results
m = lm(lifespan$RLS_Del_alpha ~ lifespan$YPE + lifespan$Ka + lifespan$Freq + lifespan$stddev );
summary(m);
###ROBUST FACTOR MULTIPLE REGRESSION ANALYSIS
#Perform regression analysis and summarize results
m = lm(lifespan$YPE ~ lifespan$Ka + lifespan$Freq + lifespan$stddev);
summary(m);
###FITNESS, MORPHOLOGICAL PLASTICITY & LIFESPAN MULTIPLE REGRESSION
#Perform regression analysis and summarize results when RLS is held constant
m = lm(lifespan$RLS_Del_alpha ~ lifespan$stddev + lifespan$YPE);
summary(m);
#Perform regression analysis and summarize results when morphological plasticity is held constant
m = lm(lifespan$stddev ~ lifespan$YPE + lifespan$RLS_Del_alpha);
summary(m);
#Perform regression analysis and summarize results when fitness is held constant
m = lm(lifespan$YPE ~ lifespan$stddev + lifespan$RLS_Del_alpha);
summary(m);
# batch GSE stddev ~ scmdStddev, CV, 2014 July 1
setwd("~/github/ScottSummer14/Scott,sandbox14")
rm(list=ls())
#Read cellular morpholy mutant table with stddev, mean, CV into R
# scmd_CVbyRow20140701.csv was an output of "ScottSummer14/scmd_CV_20140701.R"
scmd = read.csv( "scmd_CVbyRow20140701.csv")
names(scmd)[c(1:2, 500:506)]
scmd$ORF = as.character(scmd$name)
#GSE files
files = list.files(, path="data/GSElog2CV", pattern='GSE')
output = data.frame(files)
# i = 15
for ( i in 1:length(files) ) {
filename = paste( "data/GSElog2CV/", files[i], sep='')
CV.tb = read.csv(filename)
CV.tb$ORF = as.character( CV.tb$ORF )
tb = merge(CV.tb, scmd[, c(1:2,502:506)] )#based on ORF
picname = paste( 'plots/', files[i], '.pdf', sep='' )
pdf(picname, width=900, height=900)
plot(tb$myStddev ~ tb$CV, xlab='morphology plasticity', ylab='expression plasticity')
dev.off()
m = lm(tb$myCV ~ tb$CV)
s = summary(m)
output$p.gseCV.scmdCV[i] = 1-pf( s$fstat[1], s$fstat[2], s$fstat[3])
m = lm(tb$myStddev ~ tb$stddev)
s = summary(m)
output$p.gseStddev.scmdStddev[i] = 1-pf( s$fstat[1], s$fstat[2], s$fstat[3])
}
# i = 5
summary(output)
hist(output$p.gseCV.scmdCV, br=20)
hist(output$p.gseStddev.scmdStddev, br=20)
tmp = output[ output$p.gseStddev.scmdStddev<0.05, ]
length(tmp[,1])
# i = 8
?pdf
i = 15
for ( i in 1:length(files) ) {
filename = paste( "data/GSElog2CV/", files[i], sep='')
CV.tb = read.csv(filename)
CV.tb$ORF = as.character( CV.tb$ORF )
tb = merge(CV.tb, scmd[, c(1:2,502:506)] )#based on ORF
picname = paste( 'plots/', files[i], '.pdf', sep='' )
pdf(picname, width=5, height=5)
plot(tb$myStddev ~ tb$CV, xlab='morphology plasticity', ylab='expression plasticity')
dev.off()
m = lm(tb$myCV ~ tb$CV)
s = summary(m)
output$p.gseCV.scmdCV[i] = 1-pf( s$fstat[1], s$fstat[2], s$fstat[3])
m = lm(tb$myStddev ~ tb$stddev)
s = summary(m)
output$p.gseStddev.scmdStddev[i] = 1-pf( s$fstat[1], s$fstat[2], s$fstat[3])
}
# i = 5
View(tb)
# i = 15
for ( i in 1:length(files) ) {
filename = paste( "data/GSElog2CV/", files[i], sep='')
CV.tb = read.csv(filename)
CV.tb$ORF = as.character( CV.tb$ORF )
tb = merge(CV.tb, scmd[, c(1:2,502:506)] )#based on ORF
m = lm(tb$myCV ~ tb$CV )
s = summary(m)
output$p.gseCV.scmdCV[i] = 1-pf( s$fstat[1], s$fstat[2], s$fstat[3])
m = lm(tb$myStddev ~ tb$stddev)
s = summary(m)
output$p.gseStddev.scmdStddev[i] = 1-pf( s$fstat[1], s$fstat[2], s$fstat[3])
picname = paste( 'plots/', files[i], '.stddev.pdf', sep='' )
pdf(picname, width=5, height=5)
plot(tb$myStddev ~ tb$Stddev, xlab='morphology plasticity', ylab='expression plasticity')
abline(m, col='red')
dev.off()
}
View(tb)
for ( i in 1:length(files) ) {
filename = paste( "data/GSElog2CV/", files[i], sep='')
CV.tb = read.csv(filename)
CV.tb$ORF = as.character( CV.tb$ORF )
tb = merge(CV.tb, scmd[, c(1:2,502:506)] )#based on ORF
m = lm(tb$myCV ~ tb$CV )
s = summary(m)
output$p.gseCV.scmdCV[i] = 1-pf( s$fstat[1], s$fstat[2], s$fstat[3])
m = lm(tb$myStddev ~ tb$stddev)
s = summary(m)
output$p.gseStddev.scmdStddev[i] = 1-pf( s$fstat[1], s$fstat[2], s$fstat[3])
picname = paste( 'plots/', files[i], '.stddev.pdf', sep='' )
pdf(picname, width=5, height=5)
plot(tb$myStddev ~ tb$stddev, xlab='morphology plasticity', ylab='expression plasticity')
abline(m, col='red')
dev.off()
}
plot(tb$myStddev ~ tb$stddev, xlab='morphology plasticity', ylab='expression plasticity')
myY = max(tb$myStddev)*0.8; myX=max(tb$stddev)*0.7;
mytext = paste("p=",1-pf( s$fstat[1], s$fstat[2], s$fstat[3]) );
text(myX,myY, mytext)
abline(m, col='red')
plot(tb$myStddev ~ tb$stddev, xlab='morphology plasticity', ylab='expression plasticity', main= file[i])
myY = max(tb$myStddev)*0.8; myX=max(tb$stddev)*0.7;
mytext = paste("p=",1-pf( s$fstat[1], s$fstat[2], s$fstat[3]) );
text(myX,myY, mytext)
abline(m, col='red')
plot(tb$myStddev ~ tb$stddev, xlab='morphology plasticity', ylab='expression plasticity', main=files[i])
for ( i in 1:length(files) ) {
filename = paste( "data/GSElog2CV/", files[i], sep='')
CV.tb = read.csv(filename)
CV.tb$ORF = as.character( CV.tb$ORF )
tb = merge(CV.tb, scmd[, c(1:2,502:506)] )#based on ORF
m = lm(tb$myCV ~ tb$CV )
s = summary(m)
output$p.gseCV.scmdCV[i] = 1-pf( s$fstat[1], s$fstat[2], s$fstat[3])
m = lm(tb$myStddev ~ tb$stddev)
s = summary(m)
output$p.gseStddev.scmdStddev[i] = 1-pf( s$fstat[1], s$fstat[2], s$fstat[3])
picname = paste( 'plots/', files[i], '.stddev.pdf', sep='' )
pdf(picname, width=5, height=5)
plot(tb$myStddev ~ tb$stddev, xlab='morphology plasticity', ylab='expression plasticity', main=files[i])
myY = max(tb$myStddev)*0.8; myX=max(tb$stddev)*0.7;
mytext = paste("p=",1-pf( s$fstat[1], s$fstat[2], s$fstat[3]) );
text(myX,myY, mytext)
abline(m, col='red')
dev.off()
}
i=15
files[15]
